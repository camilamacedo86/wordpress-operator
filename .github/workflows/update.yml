name: Alpha Update (with AI summary)

permissions:
  contents: write
  issues: write
  pull-requests: write
  models: read  # Necessary permission

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 2" # Every Tuesday at 00:00 UTC

jobs:
  alpha-update:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Configure Git
        # local config is enough inside the runner workspace
        run: |
          git config --local user.name  "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local merge.conflictStyle diff3
          git config --local rerere.enabled true

      - name: Install Kubebuilder
        run: |
          git clone --depth 1 --branch master https://github.com/kubernetes-sigs/kubebuilder.git /tmp/kubebuilder
          cd /tmp/kubebuilder
          make build
          sudo cp bin/kubebuilder /usr/local/bin/
          kubebuilder version

      - name: Run kubebuilder alpha update
        id: run_update
        run: |
          kubebuilder alpha update \
            --force \
            --restore-path .github/workflows \
            --push \
            --output-branch gh-model-update \
            --from-version v4.5.2 \
            --open-gh-issue

      - name: Detect conflict markers
        id: detect
        run: |
          # Detect unresolved conflict markers in the repo
          found_files="$(git grep -nE '^(<<<<<<< |>>>>>>> |=======$)' || true)"
          msg_flag="$(git log -1 --pretty=%B | grep -F '[with conflicts]' || true)"
          if [ -n "$found_files" ] || [ -n "$msg_flag" ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            printf "%s\n" "$found_files" > conflict_files.txt
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install gh-models extension
        if: steps.detect.outputs.found == 'true'
        run: |
          gh extension install https://github.com/github/gh-models || true
          gh models --help >/dev/null

      - name: Summarize conflicts with GitHub Models (gh)
        if: steps.detect.outputs.found == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="$(gh repo view --json nameWithOwner --jq .nameWithOwner)"
          TITLE_PREFIX="[Action Required] Upgrade the Scaffold:"
          ISSUE_NUMBER="$(gh issue list --search "$TITLE_PREFIX" --json number --jq '.[0].number' || true)"
          
          CONTEXT="$(printf 'Repo: %s\n\nLatest commit msg:\n%s\n\nConflicted files (grep):\n%s\n' \
            "$REPO" \
            "$(git log -1 --pretty=%B)" \
            "$(cat conflict_files.txt)")"
          
          # Compact diff for precision (kept small to be token-safe)
          DIFF="$(git diff --merge --unified=0 || true)"
          
          SUMMARY="$(
            printf "%s\n\n--- DIFF (u=0) ---\n%s\n" "$CONTEXT" "$DIFF" \
            | gh models run openai/gpt-4o-mini \
              "You are a senior Go/K8s engineer. Using the stdin context (commit message, conflict list, compact diff):
               1) List conflicted files,
               2) Likely cause per file (scaffold vs local customization),
               3) Exact resolution steps (edits/keeps/removals),
               4) Follow-up commands (e.g., make manifests generate fmt vet lint-fix),
               5) Flag risky changes or API deprecations.
               Keep it concise and grouped by file."
          )"
          
          if [ -n "$ISSUE_NUMBER" ]; then
            gh issue comment "$ISSUE_NUMBER" --body "**AI conflict summary (gh models)**:\n\n$SUMMARY"
          else
            gh issue create --title "AI Conflict Summary (auto-update)" --body "$SUMMARY"
          fi