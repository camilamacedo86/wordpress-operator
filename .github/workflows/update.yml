name: Alpha Update
permissions:
  contents: write
  issues: write
  models: read  # required to call GitHub Models

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 2"

jobs:
  alpha-update:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install Kubebuilder (master)
        run: |
          set -euxo pipefail
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"
          export PATH="$(go env GOPATH)/bin:$PATH"
          if ! go install sigs.k8s.io/kubebuilder/v4/cmd/kubebuilder@master; then
            git clone --depth 1 --branch master https://github.com/kubernetes-sigs/kubebuilder /tmp/kubebuilder
            make -C /tmp/kubebuilder install
          fi
          kubebuilder version

      - name: Run kubebuilder alpha update
        run: |
          kubebuilder alpha update \
            --force \
            --push \
            --restore-path .github/workflows \
            --open-gh-issue \
            --from-version v4.5.2 \
            --output-branch test-ai-update-2

      # Make a smaller patch: zero-context lines reduces size a lot.
      - name: Create patch of last commit
        run: |
          git show --no-color --unified=0 HEAD > update.patch

      - name: Prepare model prompt
        run: |
          cat > prompt.txt <<'EOF'
          Start by stating that this summary is AI generated and can contain errors.
          You are a concise update summarizer for an automated Kubebuilder scaffold update.
          Analyze the patch and write a GitHub Issue comment that explains what changed.
          Scan the patch for Git conflict markers (<<<<<<<, =======, >>>>>>>). For each conflict:
          - Explain the likely cause.
          - Suggest how to resolve it.
          - Recommend next steps.
          Constraints: Markdown only, no raw diff snippets.

          ---- DIFF BELOW ----
          EOF
          cat update.patch >> prompt.txt

      - name: Select latest OpenAI chat model (fallback to gpt-4.1)
        id: model
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          catalog=$(curl -sS -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://models.github.ai/catalog/models)

          model_id=$(
            echo "$catalog" | jq -r '
              map(select(.publisher=="OpenAI"
                         and (.id|test("^openai/gpt"))
                         and (.supported_output_modalities|index("text"))))
              | sort_by(.version)
              | last
              | .id // empty
            '
          )
          if [ -z "$model_id" ]; then model_id="openai/gpt-4.1"; fi
          echo "id=$model_id" >> "$GITHUB_OUTPUT"

      # CHUNKED inference to avoid 413
      - name: Generate summary with GitHub Models (chunked)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          API="https://models.github.ai/inference/chat/completions"
          HDRS=(-H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -H "Content-Type: application/json")
          MODEL="${{ steps.model.outputs.id }}"

          # Split prompt into ~180 KB chunks to stay well below body limits
          CHUNK_BYTES=${CHUNK_BYTES:-180000}
          rm -f prompt_part_* partial_*.md response*.json COMMENT.md

          split -b "$CHUNK_BYTES" -d -a 3 prompt.txt prompt_part_

          i=0
          for f in prompt_part_*; do
            body=$(jq -Rs --arg model "$MODEL" '
              { model: $model,
                messages: [ { "role":"user", "content": . } ],
                max_tokens: 1200, temperature: 0 }' < "$f")

            curl -sS -L --fail-with-body "${HDRS[@]}" "$API" -d "$body" \
              | tee "response_$i.json" >/dev/null

            jq -e -r '.choices[0].message.content // empty' "response_$i.json" > "partial_$i.md"
            if [ ! -s "partial_$i.md" ]; then
              echo "Empty chunk summary (chunk $i). See response_$i.json:" >&2
              cat "response_$i.json" >&2
              exit 1
            fi
            i=$((i+1))
          done

          # Compose a final, single comment from chunk summaries
          compose_prompt=$(
            { echo "Combine the following chunk summaries into a single clear GitHub Issue comment.";
              echo "Keep it concise, non-duplicative, and include a conflicts section if any were found.";
              echo "Use Markdown only (no code fences with raw diff).";
              echo; echo "---- CHUNK SUMMARIES ----"; cat partial_*.md; } \
            | jq -Rs .
          )

          body=$(jq -n --arg model "$MODEL" --argjson content "$compose_prompt" \
            '{ model: $model,
               messages: [ { "role":"user", "content": $content } ],
               max_tokens: 2000, temperature: 0 }')

          curl -sS -L --fail-with-body "${HDRS[@]}" "$API" -d "$body" \
            | tee response_compose.json >/dev/null

          jq -e -r '.choices[0].message.content // empty' response_compose.json > COMMENT.md
          if [ ! -s COMMENT.md ]; then
            echo "Compose step produced no content. See response_compose.json:" >&2
            cat response_compose.json >&2
            exit 1
          fi

      - name: Determine update issue number
        id: find-issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          out=$(gh issue list --state open --limit 100 --json number,title,createdAt)
          issue_number=$(echo "$out" | jq -r '
            sort_by(.createdAt)
            | map(select(.title|test("^\\[Action Required\\] Upgrade the Scaffold: v[0-9.]+ -> v[0-9.]+$")))
            | last.number // empty
          ')
          echo "issue_number=${issue_number}" >> "$GITHUB_OUTPUT"

      - name: Post comment to issue
        if: ${{ steps.find-issue.outputs.issue_number != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment "${{ steps.find-issue.outputs.issue_number }}" --body-file COMMENT.md
