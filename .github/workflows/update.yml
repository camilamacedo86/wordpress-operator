name: Alpha Update (with AI summary)

permissions:
  contents: write
  issues: write
  pull-requests: write
  models: read  # Necessary permission

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 2" # Every Tuesday at 00:00 UTC

jobs:
  alpha-update:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Configure Git
        run: |
          git config --local user.name  "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local merge.conflictStyle diff3
          git config --local rerere.enabled true

      - name: Install Kubebuilder
        run: |
          git clone --depth 1 --branch master https://github.com/kubernetes-sigs/kubebuilder.git /tmp/kubebuilder
          cd /tmp/kubebuilder
          make build
          sudo cp bin/kubebuilder /usr/local/bin/
          kubebuilder version

      - name: Run kubebuilder alpha update
        id: run_update
        run: |
          kubebuilder alpha update \
            --force \
            --restore-path .github/workflows \
            --push \
            --output-branch kubebuilder-update-gh-model-update-2 \
            --from-version v4.5.2 \
            --open-gh-issue

      - name: Detect conflict markers
        id: detect
        run: |
          found_files="$(git grep -nE '^(<<<<<<< |>>>>>>> |=======$)' || true)"
          msg_flag="$(git log -1 --pretty=%B | grep -F '[with conflicts]' || true)"
          if [ -n "$found_files" ] || [ -n "$msg_flag" ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            printf "%s\n" "$found_files" > conflict_files.txt
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install gh-models extension
        if: steps.detect.outputs.found == 'true'
        run: |
          gh extension install https://github.com/github/gh-models || true
          gh models --help >/dev/null

      - name: Summarize conflicts with GitHub Models (gh)
        if: steps.detect.outputs.found == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          # Locate the Issue opened by kubebuilder alpha update (do not create a new one)
          TITLE_PREFIX="[Action Required] Upgrade the Scaffold:"
          ISSUE_NUMBER="$(gh issue list --search "$TITLE_PREFIX" --json number --jq '.[0].number' || true)"
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "No auto-update Issue found. Skipping AI comment."
            exit 0
          fi

          REPO="$(gh repo view --json nameWithOwner --jq .nameWithOwner)"
          LAST_MSG="$(git log -1 --pretty=%B)"

          # Classify conflicted files into GENERATED vs SOURCE for better guidance
          touch conflict_files.txt
          GENERATED_GLOBS='zz_generated\\.|config/crd/bases/'
          GEN_FILES="$(grep -E "$GENERATED_GLOBS" conflict_files.txt || true)"
          SRC_FILES="$(grep -Ev "$GENERATED_GLOBS" conflict_files.txt || true)"

          # Build a compact diff but EXCLUDE generated files (so the model focuses on real code)
          DIFF="$(
            git diff --merge --unified=0 -- \
              ':(exclude)api/**/zz_generated.*' \
              ':(exclude)config/crd/bases/*.yaml' \
              ':(exclude)**/bindata.go' || true
          )"

          # Teach the model Kubebuilder conventions explicitly
          read -r -d '' KB_TEACH <<'KB_EOF' || true
          PROJECT STYLE: Kubebuilder controller project.
          RULES:
          - Treat files matching "api/**/zz_generated.*" and anything under "config/crd/bases/" as GENERATED by controller-gen/kustomize.
          - Do NOT resolve conflicts by editing generated files. Instead:
            1) Fix the source types (e.g., api/*_types.go),
            2) Then run: make manifests generate fmt vet lint-fix
          - For *_types.go:
            - Preserve local custom fields/markers,
            - Adopt new scaffold markers (validation/webhook) and tags,
            - Resolve imports and API changes.
          - For CRDs at config/crd/bases/*.yaml:
            - Consider them generated; do not hand-merge YAML.
            - After fixing types, regenerate CRDs via "make manifests".
          - Always prefer regeneration over manual edits for generated artifacts.
          OUTPUT FORMAT (be concise):
          - Per file in conflict: mark as [GENERATED] or [SOURCE].
          - For [GENERATED]: "resolve types → regenerate" with exact make commands.
          - For [SOURCE]: concrete keep/edit/remove steps.
          - End with the command sequence to run.
          KB_EOF

          # Build the context we’ll feed to the model
          CONTEXT="$(printf '%s\n\nRepo: %s\n\nLatest commit msg:\n%s\n\n-- Conflicted files (SOURCE) --\n%s\n\n-- Conflicted files (GENERATED) --\n%s\n' \
            "$KB_TEACH" "$REPO" "$LAST_MSG" "$SRC_FILES" "$GEN_FILES")"

          SUMMARY="$(
            printf "%s\n\n--- DIFF (u=0; generated excluded) ---\n%s\n" "$CONTEXT" "$DIFF" \
            | gh models run openai/gpt-4o-mini \
              "Using the stdin context (Kb-style rules, commit message, classified conflicts, compact diff with generated files excluded):
               Produce a concise conflict resolution plan:
               1) For each conflicted file: tag as [SOURCE] or [GENERATED] and give exact steps.
               2) For GENERATED: say 'fix types then regenerate' and list: make manifests generate fmt vet lint-fix.
               3) For SOURCE: specify keep/edit/remove guidance and any API changes to watch.
               4) Finish with the final command sequence to run.
               Keep it brief, grouped by file."
          )"

          # Comment on the existing Issue (do NOT create new issues)
          gh issue comment "$ISSUE_NUMBER" --body "**AI conflict summary (gh models)**:\n\n$SUMMARY"
