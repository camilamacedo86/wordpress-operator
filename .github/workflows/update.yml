name: Alpha Update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * 1" # Mondays 06:00 UTC

permissions:
  contents: write        # push branch
  pull-requests: write   # open PR
  issues: write          # create/update issue

jobs:
  alpha-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install Kubebuilder
        run: |
          curl -fsSL -o kubebuilder "https://go.kubebuilder.io/dl/latest/$(go env GOOS)/$(go env GOARCH)"
          chmod +x kubebuilder
          sudo mv kubebuilder /usr/local/bin/

      - name: Get Kubebuilder version
        id: kb
        run: |
          RAW="$(kubebuilder version || true)"
          VERSION="$(echo "$RAW" | sed -E 's/.*([vV][0-9]+\.[0-9]+\.[0-9]+).*/\1/I')"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Run kubebuilder alpha update
        run: |
          kubebuilder alpha update --force --from-version v4.5.2

      - name: Detect merge branch & conflict status
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="$(git branch --show-current || true)"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

          if [[ "$BRANCH" != tmp-merge-* && "$BRANCH" != *merge* ]]; then
            echo "is_merge=no" >> "$GITHUB_OUTPUT"
            echo "has_conflicts=unknown" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "is_merge=yes" >> "$GITHUB_OUTPUT"

          if git ls-files -u | grep -q . ; then
            echo "has_conflicts=yes" >> "$GITHUB_OUTPUT"
          else
            echo "has_conflicts=no" >> "$GITHUB_OUTPUT"
          fi

      - name: Push merge branch
        if: steps.detect.outputs.is_merge == 'yes'
        run: |
          git push -u origin "${{ steps.detect.outputs.branch }}" --force-with-lease

      - name: Build PR body (file)
        if: steps.detect.outputs.is_merge == 'yes'
        run: |
          printf '%s\n' \
            "Automated update using **kubebuilder ${{ steps.kb.outputs.version }}**." \
            "" \
            "- Merge branch: \`${{ steps.detect.outputs.branch }}\`" \
            "- Conflicts: **${{ steps.detect.outputs.has_conflicts }}**" \
            "" \
            "Please review and merge." \
            > pr_body.md

      - name: Create pull request and capture URL
        if: steps.detect.outputs.is_merge == 'yes'
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --title "chore: update Kubebuilder scaffolding to ${{ steps.kb.outputs.version }}" \
            --body-file pr_body.md \
            --base main \
            --head "${{ steps.detect.outputs.branch }}" \
            --json url -q .url)
          echo "url=$PR_URL" >> "$GITHUB_OUTPUT"

      - name: Build issue body (file)
        if: steps.detect.outputs.is_merge == 'yes' && steps.pr.outputs.url
        run: |
          printf '%s\n' \
            "An automated \`kubebuilder alpha update\` was run." \
            "" \
            "**Kubebuilder version used:** ${{ steps.kb.outputs.version }}" \
            "**Merge branch:** \`${{ steps.detect.outputs.branch }}\`" \
            "**Conflicts:** **${{ steps.detect.outputs.has_conflicts }}**" \
            "**Pull Request:** ${{ steps.pr.outputs.url }}" \
            "" \
            "**Docs:**" \
            "- Update command: https://kubebuilder.io/reference/commands/alpha_update" \
            "- Releases: https://github.com/kubernetes-sigs/kubebuilder/releases" \
            > issue_body.md

      - name: Create/update tracking issue (with PR link)
        if: steps.detect.outputs.is_merge == 'yes' && steps.pr.outputs.url
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TITLE="Update your project to latest versions of Kubebuilder Scaffold"
          ISSUE=$(gh issue list --state open -S "in:title $TITLE" --json number --jq '.[0].number' || true)
          if [ -n "$ISSUE" ]; then
            gh issue comment "$ISSUE" --body-file issue_body.md
            gh issue edit "$ISSUE" --add-label "kubebuilder" || true
          else
            gh issue create --title "$TITLE" --body-file issue_body.md --label "kubebuilder"
          fi

      - name: No merge branch found (nothing to do)
        if: steps.detect.outputs.is_merge != 'yes'
        run: echo "No merge branch produced; no PR/issue created."
