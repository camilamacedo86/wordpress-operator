name: Kubebuilder PR Conflict & Guidance

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: read
  models: read

jobs:
  ai-review:
    if: startsWith(github.event.pull_request.head.ref, 'kubebuilder-update')
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MODEL: openai/gpt-4o-mini

    steps:
      - name: Checkout PR HEAD
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Install gh-models
        run: gh extension install https://github.com/github/gh-models || true

      - name: Parse PR title (FROM/TO versions)
        id: parse
        shell: bash
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          FROM="$(sed -nE 's/.*[Ff]rom[[:space:]]+(v[0-9]+\.[0-9]+\.[0-9]+).*/\1/p' <<< "$TITLE" | head -n1)"
          TO="$(sed -nE 's/.*[Tt]o[[:space:]]+(v[0-9]+\.[0-9]+\.[0-9]+).*/\1/p'   <<< "$TITLE" | head -n1)"
          if [[ -z "$FROM" || -z "$TO" ]]; then
            FROM="$(sed -nE 's/.*(v[0-9]+\.[0-9]+\.[0-9]+)[[:space:]]*->.*/\1/p' <<< "$TITLE" | head -n1)"
            TO="$(sed -nE 's/.*->[[:space:]]*(v[0-9]+\.[0-9]+\.[0-9]+).*/\1/p'   <<< "$TITLE" | head -n1)"
          fi
          echo "from=$FROM" >> "$GITHUB_OUTPUT"
          echo "to=$TO"     >> "$GITHUB_OUTPUT"

      - name: Get Kubebuilder release notes URL (TO)
        id: rel
        shell: bash
        run: |
          TO="${{ steps.parse.outputs.to }}"
          if [[ -z "$TO" ]]; then
            echo "url=https://github.com/kubernetes-sigs/kubebuilder/releases" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          URL="$(gh release view "$TO" --repo kubernetes-sigs/kubebuilder --json url --jq .url || true)"
          echo "url=${URL:-https://github.com/kubernetes-sigs/kubebuilder/releases/tag/$TO}" >> "$GITHUB_OUTPUT"

      - name: Extract conflicted files from PR diff
        id: conflicts
        shell: bash
        run: |
          gh pr diff ${{ github.event.pull_request.number }} --unified=0 --patch > pr.patch
          # list files that contain conflict markers in the diff
          awk '/^\+\+\+ b\//{file=substr($0,7)} /^(<<<<<<<|=======|>>>>>>>)/{print file}' pr.patch \
            | sed '/^$/d' | sort -u > conflict_files.txt || true
          echo "count=$(wc -l < conflict_files.txt | tr -d ' ')" >> "$GITHUB_OUTPUT"

      - name: Ensure prompt file exists
        shell: bash
        run: |
          test -s .github/workflows/prompt.txt || { echo "prompt.txt missing"; exit 1; }
          echo "Using prompt at .github/workflows/prompt.txt"
          # Optional: show first lines for debugging
          head -n 5 .github/workflows/prompt.txt || true

      - name: Comment per conflicted file (AI)
        if: steps.conflicts.outputs.count != '0'
        shell: bash
        run: |
          REL_URL="${{ steps.rel.outputs.url }}"
          FROM="${{ steps.parse.outputs.from }}"
          TO="${{ steps.parse.outputs.to }}"
          MODEL="${MODEL:-openai/gpt-4o-mini}"

          # helper to grab a tiny hunk around markers for a given file
          hunk_for() {
            local f="$1"
            awk -v want="+++ b/$f" '
              $0 ~ /^\+\+\+ b\// { inFile = ($0==want) }
              inFile { print }
            ' pr.patch \
            | awk '
                /^(<<<<<<<|=======|>>>>>>>)/ { for(i=-6;i<=6;i++) buf[NR+i]=1 }
                { lines[NR]=$0 }
                END { for (i in buf) if (i in lines) print lines[i] }
              '
          }

          while read -r FILE; do
            [[ -z "$FILE" ]] && continue

            {
              echo "FROM: ${FROM:-unknown}"
              echo "TO:   ${TO:-unknown}"
              echo "REL_URL: ${REL_URL:-https://github.com/kubernetes-sigs/kubebuilder/releases}"
              echo "FILE: $FILE"
              echo
              echo "DIFF HUNK (truncated around conflict markers):"
              hunk_for "$FILE" | sed 's/^/    /'
            } > ctx.txt

            # Use the repo prompt
            gh models run "$MODEL" -F .github/workflows/prompt.txt < ctx.txt > comment.md || {
              printf ':robot: AI-generated (may contain mistakes).\n- Failed to generate guidance for `%s`.\n' "$FILE" > comment.md
            }

            {
              echo "**File:** \`$FILE\`"
              echo
              cat comment.md
            } > body.md

            gh pr comment ${{ github.event.pull_request.number }} --body-file body.md
            echo "Commented on $FILE"
          done < conflict_files.txt

      - name: Post all-clear comment when no conflicts
        if: steps.conflicts.outputs.count == '0'
        shell: bash
        run: |
          REL_URL="${{ steps.rel.outputs.url }}"
          cat > body.md <<EOF
:robot: AI-generated (may contain mistakes).
  - No conflict markers detected in this PR diff.
  - Please still run all Makefile targets to ensure generated assets are updated:
    \`make manifests generate fmt vet lint-fix\`
  - To know more about this change see the release notes: ${REL_URL:-https://github.com/kubernetes-sigs/kubebuilder/releases}
  EOF
  gh pr comment ${{ github.event.pull_request.number }} --body-file body.md
