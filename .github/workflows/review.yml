name: Kubebuilder PR Conflict & Guidance

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  models: read

jobs:
  ai-review:
    if: startsWith(github.event.pull_request.head.ref, 'kubebuilder-update')
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Install gh-models extension
        run: |
          gh extension install https://github.com/github/gh-models || true

      - name: Parse PR title (extract versions)
        id: parse
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          FROM="$(sed -nE 's/.*from (v[0-9]+\.[0-9]+\.[0-9]+).*/\1/i p' <<< "$TITLE" | head -n1)"
          TO="$(sed -nE 's/.*to (v[0-9]+\.[0-9]+\.[0-9]+).*/\1/i p' <<< "$TITLE" | head -n1)"
          echo "from=$FROM" >> "$GITHUB_OUTPUT"
          echo "to=$TO" >> "$GITHUB_OUTPUT"

      - name: Fetch Kubebuilder release notes
        id: rel
        run: |
          TO="${{ steps.parse.outputs.to }}"
          NOTES="$(gh release view "$TO" --repo kubernetes-sigs/kubebuilder --notes || true)"
          URL="$(gh release view "$TO" --repo kubernetes-sigs/kubebuilder --json url --jq .url || true)"
          echo "notes<<EOF" >> "$GITHUB_OUTPUT"
          echo "$NOTES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Simulate merge with main
        id: simulate
        run: |
          git fetch origin +refs/heads/main:refs/remotes/origin/main
          git checkout -B _merge_try origin/main
          git config --local merge.conflictStyle diff3
          git config --local rerere.enabled true
          if git merge --no-commit --no-ff "${{ github.event.pull_request.head.sha }}"; then
            echo "has_conflicts=false" >> "$GITHUB_OUTPUT"
            exit 0
          else
            echo "has_conflicts=true" >> "$GITHUB_OUTPUT"
          fi
          git grep -nE '^(<<<<<<< |>>>>>>> |=======$)' || true > conflict_markers.txt
          awk -F: '{print $1}' conflict_markers.txt | sort -u > conflict_files.txt || true

      - name: Summarize with AI
        if: always()
        run: |
          HAS_CONFLICTS="${{ steps.simulate.outputs.has_conflicts }}"
          TO="${{ steps.parse.outputs.to }}"
          REL_URL="${{ steps.rel.outputs.url }}"

          GEN_RE='(api/.*/zz_generated\..*|config/crd/bases/.*\.ya?ml|.*/bindata\.go)'
          GEN_FILES="$(grep -E "$GEN_RE" conflict_files.txt || true)"
          SRC_FILES="$(grep -Ev "$GEN_RE" conflict_files.txt || true)"

          STATUS=$([ "$HAS_CONFLICTS" = "true" ] && echo "❌ Conflicts detected" || echo "✅ No conflicts")

          {
            echo "PROJECT: Kubebuilder controller project"
            echo "$STATUS for PR #${{ github.event.pull_request.number }}"
            echo
            echo "Upgrade: from ${{ steps.parse.outputs.from }} to $TO"
            echo
            echo "-- Conflicted (SOURCE) --"
            echo "${SRC_FILES:-<none>}"
            echo
            echo "-- Conflicted (GENERATED) --"
            echo "${GEN_FILES:-<none>}"
            echo
            echo "-- Release Notes ($TO) --"
            echo "See: $REL_URL"
            echo
            echo "${{ steps.rel.outputs.notes }}"
          } > ctx.txt

          REVIEW="$(gh models run openai/gpt-4o-mini \
            "You are a senior Go/K8s engineer. Using the stdin context, write a concise PR review comment:
             - For each conflicted file:
               * If [GENERATED] (zz_generated, config/crd/bases): say 'solve by running make generate' or 'fix types then make manifests'.
               * Add 'validate with make install' tip if CRDs/webhooks changed.
               * Do NOT suggest hand-editing generated code.
             - For [SOURCE]: give keep/edit/remove guidance.
             - End with exact command sequence (make manifests generate fmt vet lint-fix).
             - Mention risky changes if visible in release notes.
             - Always close with: 'To know more about this change see the release notes: <link>'. \
             Keep style like golangci-bot (bullet points, short sentences)." < ctx.txt)"

          echo "$REVIEW" > review.md
          gh pr review ${{ github.event.pull_request.number }} --comment -F review.md

      - name: Fail if conflicts
        if: steps.simulate.outputs.has_conflicts == 'true'
        run: exit 1
